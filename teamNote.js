// 참고

// 시간제한 (1초 기준)==================================================================

// N의 범위가 500인 경우 : 시간복잡도가 O(n3제곱) 인 알고리즘 설계를 하면 문제를 풀 수 있다.
// N의 범위가 2,000인 경우 : 시간복잡도가 O(n2제곱) 인 알고리즘 설계를 하면 문제를 풀 수 있다.
// N의 범위가 100,000인 경우 : 시간복잡도가 O(nlogn) 인 알고리즘 설계를 하면 문제를 풀 수 있다.
// N의 범위가 10,000,000인 경우 : 시간복잡도가 O(n) 인 알고리즘 설계를 하면 문제를 풀 수 있다.

// =================================================================================


// 실수의 한계========================================================================
// IEEE754 표준에서는 살수형을 저장하기 위해 4바이트, 혹은 8바이트의 고정된 크기의 메모리를 할당하므로, 컴퓨터 시스템은 실수 정보를 표현하는 정확도에 한계를 가짐.
// ex) 0.1 + 0.2 == 0.3 => false

// Number.EPSILON은 오차없이 나타낼 수 있는 가장 작은 양의 소수를 나타낸다.
// 이렇게 무시되어도 될 정도의 작은 오차를 구분하기 위해 등장한 프로퍼티이다.

// function numberEquals(x, y){
//   return Math.abs(x-y) < Number.EPSILON; // 두개의 표현가능한 숫자 사이의 최소 차이
// }
// console.log(numberEquals(0.1 + 0.2, 0.3)) => true

// =================================================================================

